/*
Medium
You are given a 0-indexed integer array nums representing the score of students in an exam. The teacher would like to form one non-empty group of students with 
maximal strength, where the strength of a group of students of indices i0, i1, i2, ... , ik is defined as nums[i0] * nums[i1] * nums[i2] * ... * nums[ik​].
Return the maximum strength of a group the teacher can create.
 

Example 1:
Input: nums = [3,-1,-5,2,5,-9]
Output: 1350
Explanation: One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.

Example 2:
Input: nums = [-4,-5,-4]
Output: 20
Explanation: Group the students at indices [0, 1] . Then, we’ll have a resulting strength of 20. We cannot achieve greater strength.
 

Constraints:
1 <= nums.length <= 13
-9 <= nums[i] <= 9
*/

import java.util.*;

class Solution {
    public long maxStrength(int[] nums) {
        Arrays.sort(nums);
        ArrayList<Integer> negative=new ArrayList<Integer>();
        ArrayList<Integer> positive=new ArrayList<Integer>();
        ArrayList<Integer> zero=new ArrayList<Integer>();
        
        for(int i=0;i<nums.length;i++){
            if(nums[i]<0){
                negative.add(nums[i]);
            }else if(nums[i]==0){
                zero.add(nums[i]);
            }
            else{
                positive.add(nums[i]);
            }
        }
        
        long ans=1;
        for(int i=0;i<positive.size();i++){
            ans=ans*positive.get(i);
        }
        
        int size=negative.size();
        
        if(size%2==0){                           //even
            for(int i=0;i<negative.size();i++){
                ans=ans*negative.get(i);
            }  
        }else{
            if(negative.size()==1 && positive.size()==0 && zero.size()==0){
                ans=ans*negative.get(0);
            }
            for(int i=0;i<negative.size()-1;i++){
                ans=ans*negative.get(i);
            }
        }
        
        //zero ka case
        if((negative.size()==0 || negative.size()==1) && positive.size()==0 && zero.size()>0){
            ans=0;
        }
                     
        return ans;
    }
}
